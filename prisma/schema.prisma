// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  fullname String?
  username String @unique
  email String @unique
  gender String?
  address String?
  dob DateTime?
  phoneNumber String?
  profileImg String?
  coverImg String?
  password String
  role String @default("CLIENT")
  isVerified Boolean?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userSetting UserSetting?
  properties Property[]
  sharesSent  Share[]  @relation("SenderRelation")
  sharesReceived Share[] @relation("RecipientRelation")
  blogs Blog[]
  // garages UserOnGarages[]
}

model UserSetting {
  id Int @default(autoincrement()) @id
  notificationsOn Boolean
  smsEnabled Boolean
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique
}

model Property {
  id Int @id @default(autoincrement())
  userId Int
  owner User @relation(fields: [userId], references: [id], onDelete: Cascade)
  title String?
  imageUrls String[] @default([])
  slug String? @unique
  details String?
  price Int?
  categorId Int?
  category Category? @relation(fields: [categorId], references: [id], onDelete: Cascade)
  size Int?
  hasParking Boolean?
  isForSale Boolean?
  isForRent Boolean?
  placeId Int?
  place Place? @relation(fields: [placeId], references: [id], onDelete: Cascade)
  bedrooms Int?
  bathrooms Int?
  isSold Boolean @default(false)
  hasPool Boolean?
  appliances String[] @default([])
  yearBuilt DateTime?
  AC Boolean?
  YTUrl String?
  shares Share[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  details String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  properties Property[]
  blogs Blog[]
}

model Place {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sector Sector @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  sectorId Int
  properties Property[]
}

model Province {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  districts District[]
}

model District {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  province Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  provinceId Int
  sectors Sector[]
}

model Sector {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  district District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  districtId Int
  places Place[]
}

model Share {
  id Int @id @default(autoincrement())
  propertyId Int
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  senderId Int
  sender User @relation("SenderRelation", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId Int?
  recipient User? @relation("RecipientRelation", fields: [recipientId], references: [id], onDelete: Cascade)
  parentShareId Int?
  parentShare Share? @relation("ParentShare", fields: [parentShareId], references: [id], onDelete: Cascade)
  childShares Share[] @relation("ParentShare")
  createdAt DateTime @default(now())
}

model Blog {
  id Int @id @default(autoincrement())
  title String?
  content String?
  authorId Int
  categoryId Int?
  featuredImg String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug String?
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
}
