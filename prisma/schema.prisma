// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  fullname String?
  username String @unique
  email String @unique
  gender String?
  address String?
  dob DateTime?
  phoneNumber String?
  profileImg String?
  coverImg String?
  password String
  role String @default("CLIENT")
  isVerified Boolean?
  property Property[] // referencing properties
  sender Share[] @relation("senderRelation") // referencing shares - sender
  parent Share[] @relation("parentRelation") // referencing shares - parent
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userSetting UserSetting? 
  // cars Car[]
  // garages UserOnGarages[]
}

model UserSetting {
  id Int @default(autoincrement()) @id
  notificationsOn Boolean
  smsEnabled Boolean
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique
}

model Property {
  id Int @default(autoincrement()) @id
  title String
  description String
  imageIds String[]
  price Int?
  size Int?
  hasParking Boolean
  share Share[]
  info info
  hasPlot Boolean
  userId Int // referencing user
  user User @relation(fields: [userId],references: [id]) 
  
  categoryId Int // referencing user
  category Category @relation(fields: [categoryId], references: [id])

  location Int // referencing place
  place Place @relation(fields: [id], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Blog {
  id Int @default(autoincrement()) @id
  title String
  content String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id Int @default(autoincrement()) @id
  name String
  property Property[]
}

model Place {
  id Int @default(autoincrement()) @id
  property Property[] // referencing property

  provinceId Int
  province Province @relation(fields: [provinceId], references: [id])

  districtId Int
  district District @relation(fields: [districtId], references: [id])

  sectorId Int
  sector Sector @relation(fields: [sectorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Province {
  id Int @default(autoincrement()) @id
  name String
  places Int
  place Place[]
}

model District {
  id Int @default(autoincrement()) @id
  name String
  places Int
  place Place[]
}

model Sector {
  id Int @default(autoincrement()) @id
  name String
  places Int
  place Place[]
}

model Share {
  id Int @default(autoincrement()) @id
  senderId Int
  sender User? @relation("senderRelation",fields: [senderId], references: [id])

  parentId Int
  parent User? @relation("parentRelation",fields: [parentId], references: [id])

  propertyId Int
  property Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum info {
  SALE
  RENT
  LAND
}