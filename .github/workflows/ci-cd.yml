name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - '**'  # Trigger on pull requests to any branch

jobs:
  # Test Step
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci  # Faster and stricter dependency installation

      - name: Run tests
        run: npm run test:cov

      - name: Upload Coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Build and Push Step
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Run only on push to main
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login \
            --username AWS \
            --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Tag Docker Image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA
          docker build -t $IMAGE_URI .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.IMAGE_URI }}

  # Deploy Step
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Run only on push to main
    steps:
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop Running ECS Tasks
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
        run: |
          TASK_ARNS=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --desired-status RUNNING --region $AWS_REGION --query 'taskArns' --output text)
          if [ -n "$TASK_ARNS" ]; then
            for TASK_ARN in $TASK_ARNS; do
              aws ecs stop-task --cluster $ECS_CLUSTER_NAME --task $TASK_ARN --region $AWS_REGION
            done
          else
            echo "No running tasks found."
          fi

      - name: Deploy New Task Definition
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
          IMAGE_URI: ${{ env.IMAGE_URI }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FAMILY --region $AWS_REGION)
          
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | \
            jq --arg IMAGE "$IMAGE_URI" \
               '.taskDefinition | .containerDefinitions[0].image = $IMAGE |
               {family: .family, containerDefinitions: .containerDefinitions, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory}')

          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --region $AWS_REGION --query 'taskDefinition.taskDefinitionArn' --output text)

          SERVICE_NAME="${ECS_TASK_DEFINITION_FAMILY}-service"
          if aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $SERVICE_NAME --region $AWS_REGION | grep -q "MISSING"; then
            aws ecs create-service \
              --cluster $ECS_CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $NEW_TASK_DEFINITION_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
              --region $AWS_REGION
          else
            aws ecs update-service \
              --cluster $ECS_CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $NEW_TASK_DEFINITION_ARN \
              --region $AWS_REGION
          fi

          aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $SERVICE_NAME --region $AWS_REGION
