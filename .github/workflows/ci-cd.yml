name: CI/CD Pipeline

# CI Workflow
on:
  push:
    branches:
      - main  # Trigger on every push to any branch (test job)
  pull_request:
    branches:
      - '**'  # Trigger on pull requests to the main branch (build, push, deploy)

jobs:
  # Test Job (runs on every push)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: v1-dependencies-${{ hashFiles('package.json') }}
          restore-keys: |
            v1-dependencies-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test:cov

      - name: Coveralls
        uses: coverallsapp/github-action@v2

  # Build, Push and Deploy Jobs (runs only on pull requests to main)
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only runs on push to main
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login \
            --username AWS \
            --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, tag, and push image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only runs on push to main
    steps:
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Stop Running ECS Tasks
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
        run: |
          # Get the list of running task ARNs
          TASK_ARNS=$(aws ecs list-tasks \
            --cluster $ECS_CLUSTER_NAME \
            --region $AWS_REGION \
            --query 'taskArns' \
            --output text)
  
          # Stop each running task
          for TASK_ARN in $TASK_ARNS; do
            aws ecs stop-task --cluster $ECS_CLUSTER_NAME --task $TASK_ARN --region $AWS_REGION
          done
      - name: Deploy to ECS
        env:
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
          CONTAINER_PORT: "3000"
        run: |
          # Get the latest task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_FAMILY \
            --region $AWS_REGION)

          # Update the image and container configuration in the task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | \
            jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA" \
            --arg CONTAINER_NAME "$ECR_REPOSITORY_NAME" \
            --arg CONTAINER_PORT "$CONTAINER_PORT" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE | 
            .containerDefinitions[0].name = $CONTAINER_NAME |
            .containerDefinitions[0].portMappings = [{
              "containerPort": ($CONTAINER_PORT | tonumber),
              "hostPort": ($CONTAINER_PORT | tonumber),
              "protocol": "tcp"
            }] | {
              family: .family,
              taskRoleArn: .taskRoleArn,
              executionRoleArn: .executionRoleArn,
              networkMode: .networkMode,
              containerDefinitions: .containerDefinitions,
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory
            }')

          # Register new task definition
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --region $AWS_REGION \
            --cli-input-json "$NEW_TASK_DEFINITION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Check if the service exists
          SERVICE_NAME="${ECS_TASK_DEFINITION_FAMILY}-service"
          if aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $SERVICE_NAME --region $AWS_REGION | grep -q "MISSING"; then
            # Create the service if it doesn't exist
            aws ecs create-service \
              --cluster $ECS_CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $NEW_TASK_DEFINITION_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=$ECR_REPOSITORY_NAME,containerPort=$CONTAINER_PORT" \
              --region $AWS_REGION
          else
            # Update the existing service
            aws ecs update-service \
              --cluster $ECS_CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $NEW_TASK_DEFINITION_ARN \
              --region $AWS_REGION
          fi

          # Wait for the service to stabilize
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER_NAME \
            --services $SERVICE_NAME \
            --region $AWS_REGION