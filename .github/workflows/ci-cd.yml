name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - initializing-project
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: v1-dependencies-${{ hashFiles('package.json') }}
          restore-keys: |
            v1-dependencies-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      # - name: Run ESLint (uncomment if needed)
      #   run: npm run lint

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA .
          docker tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Deploy to ECS
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
        run: |
          # Get the latest task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_FAMILY \
            --region $AWS_REGION)

          # Update the image in the task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | \
            jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE | {
              family: .family,
              taskRoleArn: .taskRoleArn,
              executionRoleArn: .executionRoleArn,
              networkMode: .networkMode,
              containerDefinitions: .containerDefinitions,
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory
            }')

          # Register new task definition
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --region $AWS_REGION \
            --cli-input-json "$NEW_TASK_DEFINITION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Run the task
          aws ecs run-task \
            --cluster $ECS_CLUSTER_NAME \
            --task-definition $NEW_TASK_DEFINITION_ARN \
            --region $AWS_REGION \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}"
