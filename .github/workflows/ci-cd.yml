name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  pull_request:
    branches:
      - '**'  # Trigger on pull requests to any branch

jobs:
  # Test Job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: v1-dependencies-${{ hashFiles('package.json') }}
          restore-keys: |
            v1-dependencies-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test:cov

      - name: Upload Coverage to Coveralls
        uses: coverallsapp/github-action@v2

  # Build and Push Job
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login \
            --username AWS \
            --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, Tag, and Push Docker Image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  # Deploy Job
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Stop Running ECS Tasks
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
        run: |
          TASK_ARNS=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --desired-status RUNNING --region $AWS_REGION --query 'taskArns' --output text)
          if [ -z "$TASK_ARNS" ]; then
            echo "No tasks to stop."
          else
            for TASK_ARN in $TASK_ARNS; do
              aws ecs stop-task --cluster $ECS_CLUSTER_NAME --task $TASK_ARN --region $AWS_REGION
            done
          fi

      - name: Deploy New Task Definition
        env:
          ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
          ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
          CONTAINER_PORT: "3000"
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$GITHUB_SHA

          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_FAMILY \
            --region $AWS_REGION)

          # Update task definition with new image
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | \
            jq --arg IMAGE "$IMAGE_URI" \
               --arg CONTAINER_PORT "$CONTAINER_PORT" \
               '.taskDefinition | .containerDefinitions[0].image = $IMAGE | 
               .containerDefinitions[0].portMappings[0].containerPort = ($CONTAINER_PORT | tonumber) | 
               {family: .family, containerDefinitions: .containerDefinitions, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory}')

          # Register new task definition
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --region $AWS_REGION \
            --cli-input-json "$NEW_TASK_DEFINITION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Update ECS Service
          SERVICE_NAME="${ECS_TASK_DEFINITION_FAMILY}-service"
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEFINITION_ARN \
            --region $AWS_REGION

          # Wait for service to stabilize
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER_NAME \
            --services $SERVICE_NAME \
            --region $AWS_REGION
